"""
✨ `Actor_KeyOutput` returns the primary key fields of table type `Actor`.

It has the same format as `Actor_Key`, but is only used as mutation return value.
"""
scalar Actor_KeyOutput
"""
✨ `FavoriteMovie_KeyOutput` returns the primary key fields of table type `FavoriteMovie`.

It has the same format as `FavoriteMovie_Key`, but is only used as mutation return value.
"""
scalar FavoriteMovie_KeyOutput
"""
✨ `Movie_KeyOutput` returns the primary key fields of table type `Movie`.

It has the same format as `Movie_Key`, but is only used as mutation return value.
"""
scalar Movie_KeyOutput
"""
✨ `MovieActor_KeyOutput` returns the primary key fields of table type `MovieActor`.

It has the same format as `MovieActor_Key`, but is only used as mutation return value.
"""
scalar MovieActor_KeyOutput
"""
✨ `MovieMetadata_KeyOutput` returns the primary key fields of table type `MovieMetadata`.

It has the same format as `MovieMetadata_Key`, but is only used as mutation return value.
"""
scalar MovieMetadata_KeyOutput
"""
✨ `Review_KeyOutput` returns the primary key fields of table type `Review`.

It has the same format as `Review_Key`, but is only used as mutation return value.
"""
scalar Review_KeyOutput
"""
✨ `User_KeyOutput` returns the primary key fields of table type `User`.

It has the same format as `User_Key`, but is only used as mutation return value.
"""
scalar User_KeyOutput
"""
✨ Generated data input type for table 'Actor'. It includes all necessary fields for creating or upserting rows into table.
"""
input Actor_Data {
  """
  ✨ Generated from Field `Actor`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Actor`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Actor`.`imageUrl` of type `String!`
  """
  imageUrl: String
  """
  ✨ `_expr` server value variant of `imageUrl` (✨ Generated from Field `Actor`.`imageUrl` of type `String!`)
  """
  imageUrl_expr: String_Expr
  """
  ✨ Generated from Field `Actor`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `Actor`.`name` of type `String!`)
  """
  name_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Actor'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Actor_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Actor_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Actor_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Actor_Filter!]
  """
  ✨ Generated from Field `Actor`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Actor`.`imageUrl` of type `String!`
  """
  imageUrl: String_Filter
  """
  ✨ Generated from Field `Actor`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `Actor`.`movieActors_on_actor` of type `[MovieActor!]!`
  """
  movieActors_on_actor: MovieActor_ListFilter
  """
  ✨ Generated from Field `Actor`.`movies_via_MovieActor` of type `[Movie!]!`
  """
  movies_via_MovieActor: Movie_ListFilter
}
"""
✨ Generated first-row input type for table 'Actor'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Actor_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Actor_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Actor_Filter
}
"""
✨ Generated having input type for table 'Actor'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Actor_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [Actor_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: Actor_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [Actor_Having!]
  """
  ✨ Generated from Field `Actor`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `Actor`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `Actor`.`imageUrl_count` of type `Int!`
  """
  imageUrl_count: Int_Filter
  """
  ✨ Generated from Field `Actor`.`name_count` of type `Int!`
  """
  name_count: Int_Filter
}
"""
✨ Generated key input type for table 'Actor'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Actor_Key {
  """
  ✨ Generated from Field `Actor`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Actor`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Actor'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Actor_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Actor_Filter
}
"""
✨ Generated order input type for table 'Actor'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Actor_Order {
  """
  ✨ Generated from Field `Actor`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Actor`.`imageUrl` of type `String!`
  """
  imageUrl: OrderDirection
  """
  ✨ Generated from Field `Actor`.`name` of type `String!`
  """
  name: OrderDirection
}
"""
✨ Generated data input type for table 'FavoriteMovie'. It includes all necessary fields for creating or upserting rows into table.
"""
input FavoriteMovie_Data {
  """
  ✨ Generated from Field `FavoriteMovie`.`userId` of type `String!`
  """
  userId: String
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `FavoriteMovie`.`userId` of type `String!`)
  """
  userId_expr: String_Expr
  """
  ✨ Generated from Field `FavoriteMovie`.`movieId` of type `UUID!`
  """
  movieId: UUID
  """
  ✨ `_expr` server value variant of `movieId` (✨ Generated from Field `FavoriteMovie`.`movieId` of type `UUID!`)
  """
  movieId_expr: UUID_Expr
  """
  ✨ Generated from Field `FavoriteMovie`.`movie` of type `Movie!`
  """
  movie: Movie_Key
  """
  ✨ Generated from Field `FavoriteMovie`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'FavoriteMovie'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input FavoriteMovie_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [FavoriteMovie_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: FavoriteMovie_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [FavoriteMovie_Filter!]
  """
  ✨ Generated from Field `FavoriteMovie`.`userId` of type `String!`
  """
  userId: String_Filter
  """
  ✨ Generated from Field `FavoriteMovie`.`movieId` of type `UUID!`
  """
  movieId: UUID_Filter
  """
  ✨ Generated from Field `FavoriteMovie`.`movie` of type `Movie!`
  """
  movie: Movie_Filter
  """
  ✨ Generated from Field `FavoriteMovie`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'FavoriteMovie'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input FavoriteMovie_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [FavoriteMovie_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: FavoriteMovie_Filter
}
"""
✨ Generated having input type for table 'FavoriteMovie'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input FavoriteMovie_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [FavoriteMovie_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: FavoriteMovie_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [FavoriteMovie_Having!]
  """
  ✨ Generated from Field `FavoriteMovie`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `FavoriteMovie`.`movieId_count` of type `Int!`
  """
  movieId_count: Int_Filter
  """
  ✨ Generated from Field `FavoriteMovie`.`userId_count` of type `Int!`
  """
  userId_count: Int_Filter
}
"""
✨ Generated key input type for table 'FavoriteMovie'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input FavoriteMovie_Key {
  """
  ✨ Generated from Field `FavoriteMovie`.`userId` of type `String!`
  """
  userId: String
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `FavoriteMovie`.`userId` of type `String!`)
  """
  userId_expr: String_Expr
  """
  ✨ Generated from Field `FavoriteMovie`.`movieId` of type `UUID!`
  """
  movieId: UUID
  """
  ✨ `_expr` server value variant of `movieId` (✨ Generated from Field `FavoriteMovie`.`movieId` of type `UUID!`)
  """
  movieId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'FavoriteMovie'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input FavoriteMovie_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: FavoriteMovie_Filter
}
"""
✨ Generated order input type for table 'FavoriteMovie'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input FavoriteMovie_Order {
  """
  ✨ Generated from Field `FavoriteMovie`.`userId` of type `String!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `FavoriteMovie`.`movieId` of type `UUID!`
  """
  movieId: OrderDirection
  """
  ✨ Generated from Field `FavoriteMovie`.`movie` of type `Movie!`
  """
  movie: Movie_Order
  """
  ✨ Generated from Field `FavoriteMovie`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated filter input type for table 'Genre'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Genre_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Genre_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Genre_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Genre_Filter!]
  """
  ✨ Generated from Field `Genre`.`genre` of type `String`
  """
  genre: String_Filter
}
"""
✨ Generated first-row input type for table 'Genre'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Genre_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Genre_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Genre_Filter
}
"""
✨ Generated having input type for table 'Genre'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Genre_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [Genre_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: Genre_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [Genre_Having!]
  """
  ✨ Generated from Field `Genre`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `Genre`.`genre_count` of type `Int!`
  """
  genre_count: Int_Filter
}
"""
✨ Generated list filter input type for table 'Genre'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Genre_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Genre_Filter
}
"""
✨ Generated order input type for table 'Genre'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Genre_Order {
  """
  ✨ Generated from Field `Genre`.`genre` of type `String`
  """
  genre: OrderDirection
}
"""
✨ Generated data input type for table 'Movie'. It includes all necessary fields for creating or upserting rows into table.
"""
input Movie_Data {
  """
  ✨ Generated from Field `Movie`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Movie`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Movie`.`description` of type `String`
  """
  description: String
  """
  ✨ `_expr` server value variant of `description` (✨ Generated from Field `Movie`.`description` of type `String`)
  """
  description_expr: String_Expr
  """
  ✨ Generated from Field `Movie`.`genre` of type `String`
  """
  genre: String
  """
  ✨ `_expr` server value variant of `genre` (✨ Generated from Field `Movie`.`genre` of type `String`)
  """
  genre_expr: String_Expr
  """
  ✨ Generated from Field `Movie`.`imageUrl` of type `String!`
  """
  imageUrl: String
  """
  ✨ `_expr` server value variant of `imageUrl` (✨ Generated from Field `Movie`.`imageUrl` of type `String!`)
  """
  imageUrl_expr: String_Expr
  """
  ✨ Generated from Field `Movie`.`rating` of type `Float`
  """
  rating: Float
  """
  ✨ `_expr` server value variant of `rating` (✨ Generated from Field `Movie`.`rating` of type `Float`)
  """
  rating_expr: Float_Expr
  """
  ✨ `_update` server value variant of `rating` (✨ Generated from Field `Movie`.`rating` of type `Float`)
  """
  rating_update: [Float_Update!]
  """
  ✨ Generated from Field `Movie`.`releaseYear` of type `Int`
  """
  releaseYear: Int
  """
  ✨ `_expr` server value variant of `releaseYear` (✨ Generated from Field `Movie`.`releaseYear` of type `Int`)
  """
  releaseYear_expr: Int_Expr
  """
  ✨ `_update` server value variant of `releaseYear` (✨ Generated from Field `Movie`.`releaseYear` of type `Int`)
  """
  releaseYear_update: [Int_Update!]
  """
  ✨ Generated from Field `Movie`.`tags` of type `[String]`
  """
  tags: [String!]
  """
  ✨ `_update` server value variant of `tags` (✨ Generated from Field `Movie`.`tags` of type `[String]`)
  """
  tags_update: [String_ListUpdate!]
  """
  ✨ Generated from Field `Movie`.`title` of type `String!`
  """
  title: String
  """
  ✨ `_expr` server value variant of `title` (✨ Generated from Field `Movie`.`title` of type `String!`)
  """
  title_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Movie'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Movie_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Movie_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Movie_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Movie_Filter!]
  """
  ✨ Generated from Field `Movie`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Movie`.`description` of type `String`
  """
  description: String_Filter
  """
  ✨ Generated from Field `Movie`.`genre` of type `String`
  """
  genre: String_Filter
  """
  ✨ Generated from Field `Movie`.`imageUrl` of type `String!`
  """
  imageUrl: String_Filter
  """
  ✨ Generated from Field `Movie`.`rating` of type `Float`
  """
  rating: Float_Filter
  """
  ✨ Generated from Field `Movie`.`releaseYear` of type `Int`
  """
  releaseYear: Int_Filter
  """
  ✨ Generated from Field `Movie`.`tags` of type `[String]`
  """
  tags: String_ListFilter
  """
  ✨ Generated from Field `Movie`.`title` of type `String!`
  """
  title: String_Filter
  """
  ✨ Generated from Field `Movie`.`favorite_movies_on_movie` of type `[FavoriteMovie!]!`
  """
  favorite_movies_on_movie: FavoriteMovie_ListFilter
  """
  ✨ Generated from Field `Movie`.`movieActors_on_movie` of type `[MovieActor!]!`
  """
  movieActors_on_movie: MovieActor_ListFilter
  """
  ✨ Generated from Field `Movie`.`movieMetadatas_on_movie` of type `[MovieMetadata!]!`
  """
  movieMetadatas_on_movie: MovieMetadata_ListFilter
  """
  ✨ Generated from Field `Movie`.`reviews_on_movie` of type `[Review!]!`
  """
  reviews_on_movie: Review_ListFilter
  """
  ✨ Generated from Field `Movie`.`actors_via_MovieActor` of type `[Actor!]!`
  """
  actors_via_MovieActor: Actor_ListFilter
  """
  ✨ Generated from Field `Movie`.`users_via_FavoriteMovie` of type `[User!]!`
  """
  users_via_FavoriteMovie: User_ListFilter
  """
  ✨ Generated from Field `Movie`.`users_via_Review` of type `[User!]!`
  """
  users_via_Review: User_ListFilter
}
"""
✨ Generated first-row input type for table 'Movie'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Movie_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Movie_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Movie_Filter
}
"""
✨ Generated having input type for table 'Movie'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Movie_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [Movie_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: Movie_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [Movie_Having!]
  """
  ✨ Generated from Field `Movie`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `Movie`.`description_count` of type `Int!`
  """
  description_count: Int_Filter
  """
  ✨ Generated from Field `Movie`.`genre_count` of type `Int!`
  """
  genre_count: Int_Filter
  """
  ✨ Generated from Field `Movie`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `Movie`.`imageUrl_count` of type `Int!`
  """
  imageUrl_count: Int_Filter
  """
  ✨ Generated from Field `Movie`.`rating_count` of type `Int!`
  """
  rating_count: Int_Filter
  """
  ✨ Generated from Field `Movie`.`releaseYear_count` of type `Int!`
  """
  releaseYear_count: Int_Filter
  """
  ✨ Generated from Field `Movie`.`title_count` of type `Int!`
  """
  title_count: Int_Filter
  """
  ✨ Generated from Field `Movie`.`rating_sum` of type `Float`
  """
  rating_sum: Float_Filter
  """
  ✨ Generated from Field `Movie`.`releaseYear_sum` of type `Int`
  """
  releaseYear_sum: Int_Filter
  """
  ✨ Generated from Field `Movie`.`rating_avg` of type `Float`
  """
  rating_avg: Float_Filter
  """
  ✨ Generated from Field `Movie`.`releaseYear_avg` of type `Float`
  """
  releaseYear_avg: Float_Filter
  """
  ✨ Generated from Field `Movie`.`rating_min` of type `Float`
  """
  rating_min: Float_Filter
  """
  ✨ Generated from Field `Movie`.`releaseYear_min` of type `Int`
  """
  releaseYear_min: Int_Filter
  """
  ✨ Generated from Field `Movie`.`rating_max` of type `Float`
  """
  rating_max: Float_Filter
  """
  ✨ Generated from Field `Movie`.`releaseYear_max` of type `Int`
  """
  releaseYear_max: Int_Filter
}
"""
✨ Generated key input type for table 'Movie'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Movie_Key {
  """
  ✨ Generated from Field `Movie`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Movie`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Movie'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Movie_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Movie_Filter
}
"""
✨ Generated order input type for table 'Movie'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Movie_Order {
  """
  ✨ Generated from Field `Movie`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Movie`.`description` of type `String`
  """
  description: OrderDirection
  """
  ✨ Generated from Field `Movie`.`genre` of type `String`
  """
  genre: OrderDirection
  """
  ✨ Generated from Field `Movie`.`imageUrl` of type `String!`
  """
  imageUrl: OrderDirection
  """
  ✨ Generated from Field `Movie`.`rating` of type `Float`
  """
  rating: OrderDirection
  """
  ✨ Generated from Field `Movie`.`releaseYear` of type `Int`
  """
  releaseYear: OrderDirection
  """
  ✨ Generated from Field `Movie`.`title` of type `String!`
  """
  title: OrderDirection
}
"""
✨ Generated data input type for table 'MovieActor'. It includes all necessary fields for creating or upserting rows into table.
"""
input MovieActor_Data {
  """
  ✨ Generated from Field `MovieActor`.`movieId` of type `UUID!`
  """
  movieId: UUID
  """
  ✨ `_expr` server value variant of `movieId` (✨ Generated from Field `MovieActor`.`movieId` of type `UUID!`)
  """
  movieId_expr: UUID_Expr
  """
  ✨ Generated from Field `MovieActor`.`actorId` of type `UUID!`
  """
  actorId: UUID
  """
  ✨ `_expr` server value variant of `actorId` (✨ Generated from Field `MovieActor`.`actorId` of type `UUID!`)
  """
  actorId_expr: UUID_Expr
  """
  ✨ Generated from Field `MovieActor`.`actor` of type `Actor!`
  """
  actor: Actor_Key
  """
  ✨ Generated from Field `MovieActor`.`movie` of type `Movie!`
  """
  movie: Movie_Key
  """
  ✨ Generated from Field `MovieActor`.`role` of type `String!`
  """
  role: String
  """
  ✨ `_expr` server value variant of `role` (✨ Generated from Field `MovieActor`.`role` of type `String!`)
  """
  role_expr: String_Expr
}
"""
✨ Generated filter input type for table 'MovieActor'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input MovieActor_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [MovieActor_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: MovieActor_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [MovieActor_Filter!]
  """
  ✨ Generated from Field `MovieActor`.`movieId` of type `UUID!`
  """
  movieId: UUID_Filter
  """
  ✨ Generated from Field `MovieActor`.`actorId` of type `UUID!`
  """
  actorId: UUID_Filter
  """
  ✨ Generated from Field `MovieActor`.`actor` of type `Actor!`
  """
  actor: Actor_Filter
  """
  ✨ Generated from Field `MovieActor`.`movie` of type `Movie!`
  """
  movie: Movie_Filter
  """
  ✨ Generated from Field `MovieActor`.`role` of type `String!`
  """
  role: String_Filter
}
"""
✨ Generated first-row input type for table 'MovieActor'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input MovieActor_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [MovieActor_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: MovieActor_Filter
}
"""
✨ Generated having input type for table 'MovieActor'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input MovieActor_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [MovieActor_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: MovieActor_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [MovieActor_Having!]
  """
  ✨ Generated from Field `MovieActor`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `MovieActor`.`actorId_count` of type `Int!`
  """
  actorId_count: Int_Filter
  """
  ✨ Generated from Field `MovieActor`.`movieId_count` of type `Int!`
  """
  movieId_count: Int_Filter
  """
  ✨ Generated from Field `MovieActor`.`role_count` of type `Int!`
  """
  role_count: Int_Filter
}
"""
✨ Generated key input type for table 'MovieActor'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input MovieActor_Key {
  """
  ✨ Generated from Field `MovieActor`.`movieId` of type `UUID!`
  """
  movieId: UUID
  """
  ✨ `_expr` server value variant of `movieId` (✨ Generated from Field `MovieActor`.`movieId` of type `UUID!`)
  """
  movieId_expr: UUID_Expr
  """
  ✨ Generated from Field `MovieActor`.`actorId` of type `UUID!`
  """
  actorId: UUID
  """
  ✨ `_expr` server value variant of `actorId` (✨ Generated from Field `MovieActor`.`actorId` of type `UUID!`)
  """
  actorId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'MovieActor'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input MovieActor_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: MovieActor_Filter
}
"""
✨ Generated order input type for table 'MovieActor'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input MovieActor_Order {
  """
  ✨ Generated from Field `MovieActor`.`movieId` of type `UUID!`
  """
  movieId: OrderDirection
  """
  ✨ Generated from Field `MovieActor`.`actorId` of type `UUID!`
  """
  actorId: OrderDirection
  """
  ✨ Generated from Field `MovieActor`.`actor` of type `Actor!`
  """
  actor: Actor_Order
  """
  ✨ Generated from Field `MovieActor`.`movie` of type `Movie!`
  """
  movie: Movie_Order
  """
  ✨ Generated from Field `MovieActor`.`role` of type `String!`
  """
  role: OrderDirection
}
"""
✨ Generated data input type for table 'MovieMetadata'. It includes all necessary fields for creating or upserting rows into table.
"""
input MovieMetadata_Data {
  """
  ✨ Generated from Field `MovieMetadata`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `MovieMetadata`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `MovieMetadata`.`movieId` of type `UUID!`
  """
  movieId: UUID
  """
  ✨ `_expr` server value variant of `movieId` (✨ Generated from Field `MovieMetadata`.`movieId` of type `UUID!`)
  """
  movieId_expr: UUID_Expr
  """
  ✨ Generated from Field `MovieMetadata`.`movie` of type `Movie!`
  """
  movie: Movie_Key
  """
  ✨ Generated from Field `MovieMetadata`.`director` of type `String`
  """
  director: String
  """
  ✨ `_expr` server value variant of `director` (✨ Generated from Field `MovieMetadata`.`director` of type `String`)
  """
  director_expr: String_Expr
}
"""
✨ Generated filter input type for table 'MovieMetadata'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input MovieMetadata_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [MovieMetadata_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: MovieMetadata_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [MovieMetadata_Filter!]
  """
  ✨ Generated from Field `MovieMetadata`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `MovieMetadata`.`movieId` of type `UUID!`
  """
  movieId: UUID_Filter
  """
  ✨ Generated from Field `MovieMetadata`.`movie` of type `Movie!`
  """
  movie: Movie_Filter
  """
  ✨ Generated from Field `MovieMetadata`.`director` of type `String`
  """
  director: String_Filter
}
"""
✨ Generated first-row input type for table 'MovieMetadata'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input MovieMetadata_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [MovieMetadata_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: MovieMetadata_Filter
}
"""
✨ Generated having input type for table 'MovieMetadata'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input MovieMetadata_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [MovieMetadata_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: MovieMetadata_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [MovieMetadata_Having!]
  """
  ✨ Generated from Field `MovieMetadata`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `MovieMetadata`.`director_count` of type `Int!`
  """
  director_count: Int_Filter
  """
  ✨ Generated from Field `MovieMetadata`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `MovieMetadata`.`movieId_count` of type `Int!`
  """
  movieId_count: Int_Filter
}
"""
✨ Generated key input type for table 'MovieMetadata'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input MovieMetadata_Key {
  """
  ✨ Generated from Field `MovieMetadata`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `MovieMetadata`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'MovieMetadata'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input MovieMetadata_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: MovieMetadata_Filter
}
"""
✨ Generated order input type for table 'MovieMetadata'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input MovieMetadata_Order {
  """
  ✨ Generated from Field `MovieMetadata`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `MovieMetadata`.`movieId` of type `UUID!`
  """
  movieId: OrderDirection
  """
  ✨ Generated from Field `MovieMetadata`.`movie` of type `Movie!`
  """
  movie: Movie_Order
  """
  ✨ Generated from Field `MovieMetadata`.`director` of type `String`
  """
  director: OrderDirection
}
"""
✨ Generated data input type for table 'Review'. It includes all necessary fields for creating or upserting rows into table.
"""
input Review_Data {
  """
  ✨ Generated from Field `Review`.`movieId` of type `UUID!`
  """
  movieId: UUID
  """
  ✨ `_expr` server value variant of `movieId` (✨ Generated from Field `Review`.`movieId` of type `UUID!`)
  """
  movieId_expr: UUID_Expr
  """
  ✨ Generated from Field `Review`.`userId` of type `String!`
  """
  userId: String
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `Review`.`userId` of type `String!`)
  """
  userId_expr: String_Expr
  """
  ✨ Generated from Field `Review`.`movie` of type `Movie!`
  """
  movie: Movie_Key
  """
  ✨ Generated from Field `Review`.`user` of type `User!`
  """
  user: User_Key
  """
  ✨ Generated from Field `Review`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Review`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Review`.`rating` of type `Int`
  """
  rating: Int
  """
  ✨ `_expr` server value variant of `rating` (✨ Generated from Field `Review`.`rating` of type `Int`)
  """
  rating_expr: Int_Expr
  """
  ✨ `_update` server value variant of `rating` (✨ Generated from Field `Review`.`rating` of type `Int`)
  """
  rating_update: [Int_Update!]
  """
  ✨ Generated from Field `Review`.`reviewDate` of type `Date!`
  """
  reviewDate: Date
  """
  ✨ `_date` server value variant of `reviewDate` (✨ Generated from Field `Review`.`reviewDate` of type `Date!`)
  """
  reviewDate_date: Date_Relative
  """
  ✨ `_expr` server value variant of `reviewDate` (✨ Generated from Field `Review`.`reviewDate` of type `Date!`)
  """
  reviewDate_expr: Date_Expr
  """
  ✨ `_update` server value variant of `reviewDate` (✨ Generated from Field `Review`.`reviewDate` of type `Date!`)
  """
  reviewDate_update: [Date_Update!]
  """
  ✨ Generated from Field `Review`.`reviewText` of type `String`
  """
  reviewText: String
  """
  ✨ `_expr` server value variant of `reviewText` (✨ Generated from Field `Review`.`reviewText` of type `String`)
  """
  reviewText_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Review'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Review_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Review_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Review_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Review_Filter!]
  """
  ✨ Generated from Field `Review`.`movieId` of type `UUID!`
  """
  movieId: UUID_Filter
  """
  ✨ Generated from Field `Review`.`userId` of type `String!`
  """
  userId: String_Filter
  """
  ✨ Generated from Field `Review`.`movie` of type `Movie!`
  """
  movie: Movie_Filter
  """
  ✨ Generated from Field `Review`.`user` of type `User!`
  """
  user: User_Filter
  """
  ✨ Generated from Field `Review`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Review`.`rating` of type `Int`
  """
  rating: Int_Filter
  """
  ✨ Generated from Field `Review`.`reviewDate` of type `Date!`
  """
  reviewDate: Date_Filter
  """
  ✨ Generated from Field `Review`.`reviewText` of type `String`
  """
  reviewText: String_Filter
}
"""
✨ Generated first-row input type for table 'Review'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Review_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Review_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Review_Filter
}
"""
✨ Generated having input type for table 'Review'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Review_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [Review_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: Review_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [Review_Having!]
  """
  ✨ Generated from Field `Review`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `Review`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `Review`.`movieId_count` of type `Int!`
  """
  movieId_count: Int_Filter
  """
  ✨ Generated from Field `Review`.`rating_count` of type `Int!`
  """
  rating_count: Int_Filter
  """
  ✨ Generated from Field `Review`.`reviewDate_count` of type `Int!`
  """
  reviewDate_count: Int_Filter
  """
  ✨ Generated from Field `Review`.`reviewText_count` of type `Int!`
  """
  reviewText_count: Int_Filter
  """
  ✨ Generated from Field `Review`.`userId_count` of type `Int!`
  """
  userId_count: Int_Filter
  """
  ✨ Generated from Field `Review`.`rating_sum` of type `Int`
  """
  rating_sum: Int_Filter
  """
  ✨ Generated from Field `Review`.`rating_avg` of type `Float`
  """
  rating_avg: Float_Filter
  """
  ✨ Generated from Field `Review`.`rating_min` of type `Int`
  """
  rating_min: Int_Filter
  """
  ✨ Generated from Field `Review`.`reviewDate_min` of type `Date`
  """
  reviewDate_min: Date_Filter
  """
  ✨ Generated from Field `Review`.`rating_max` of type `Int`
  """
  rating_max: Int_Filter
  """
  ✨ Generated from Field `Review`.`reviewDate_max` of type `Date`
  """
  reviewDate_max: Date_Filter
}
"""
✨ Generated key input type for table 'Review'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Review_Key {
  """
  ✨ Generated from Field `Review`.`movieId` of type `UUID!`
  """
  movieId: UUID
  """
  ✨ `_expr` server value variant of `movieId` (✨ Generated from Field `Review`.`movieId` of type `UUID!`)
  """
  movieId_expr: UUID_Expr
  """
  ✨ Generated from Field `Review`.`userId` of type `String!`
  """
  userId: String
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `Review`.`userId` of type `String!`)
  """
  userId_expr: String_Expr
}
"""
✨ Generated list filter input type for table 'Review'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Review_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Review_Filter
}
"""
✨ Generated order input type for table 'Review'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Review_Order {
  """
  ✨ Generated from Field `Review`.`movieId` of type `UUID!`
  """
  movieId: OrderDirection
  """
  ✨ Generated from Field `Review`.`userId` of type `String!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `Review`.`movie` of type `Movie!`
  """
  movie: Movie_Order
  """
  ✨ Generated from Field `Review`.`user` of type `User!`
  """
  user: User_Order
  """
  ✨ Generated from Field `Review`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Review`.`rating` of type `Int`
  """
  rating: OrderDirection
  """
  ✨ Generated from Field `Review`.`reviewDate` of type `Date!`
  """
  reviewDate: OrderDirection
  """
  ✨ Generated from Field `Review`.`reviewText` of type `String`
  """
  reviewText: OrderDirection
}
"""
✨ Generated data input type for table 'User'. It includes all necessary fields for creating or upserting rows into table.
"""
input User_Data {
  """
  ✨ Generated from Field `User`.`id` of type `String!`
  """
  id: String
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `String!`)
  """
  id_expr: String_Expr
  """
  ✨ Generated from Field `User`.`username` of type `String!`
  """
  username: String
  """
  ✨ `_expr` server value variant of `username` (✨ Generated from Field `User`.`username` of type `String!`)
  """
  username_expr: String_Expr
}
"""
✨ Generated filter input type for table 'User'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input User_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [User_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: User_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [User_Filter!]
  """
  ✨ Generated from Field `User`.`id` of type `String!`
  """
  id: String_Filter
  """
  ✨ Generated from Field `User`.`username` of type `String!`
  """
  username: String_Filter
  """
  ✨ Generated from Field `User`.`favorite_movies_on_user` of type `[FavoriteMovie!]!`
  """
  favorite_movies_on_user: FavoriteMovie_ListFilter
  """
  ✨ Generated from Field `User`.`reviews_on_user` of type `[Review!]!`
  """
  reviews_on_user: Review_ListFilter
  """
  ✨ Generated from Field `User`.`movies_via_FavoriteMovie` of type `[Movie!]!`
  """
  movies_via_FavoriteMovie: Movie_ListFilter
  """
  ✨ Generated from Field `User`.`movies_via_Review` of type `[Movie!]!`
  """
  movies_via_Review: Movie_ListFilter
}
"""
✨ Generated first-row input type for table 'User'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input User_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [User_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: User_Filter
}
"""
✨ Generated having input type for table 'User'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input User_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [User_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: User_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [User_Having!]
  """
  ✨ Generated from Field `User`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `User`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `User`.`username_count` of type `Int!`
  """
  username_count: Int_Filter
}
"""
✨ Generated key input type for table 'User'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input User_Key {
  """
  ✨ Generated from Field `User`.`id` of type `String!`
  """
  id: String
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `String!`)
  """
  id_expr: String_Expr
}
"""
✨ Generated list filter input type for table 'User'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input User_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: User_Filter
}
"""
✨ Generated order input type for table 'User'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input User_Order {
  """
  ✨ Generated from Field `User`.`id` of type `String!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `User`.`username` of type `String!`
  """
  username: OrderDirection
}
