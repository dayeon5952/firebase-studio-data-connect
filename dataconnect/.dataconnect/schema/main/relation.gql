extend type Actor {
  """
  ✨ List `MovieActor` objects in a one-to-many relationship (where `MovieActor`.`actor` is this object).
  """
  movieActors_on_actor(
    """
    Filter condition to narrow down the query results.
    """
    where: MovieActor_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [MovieActor_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: MovieActor_Having
  ): [MovieActor!]! @fdc_generated(from: "MovieActor.actor", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Movie` objects using `MovieActor` as the join table (a `MovieActor` object exists where its `actor` is this and its `movie` is that).
  """
  movies_via_MovieActor(
    """
    Filter condition to narrow down the query results.
    """
    where: MovieActor_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [MovieActor_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: MovieActor_Having
  ): [Movie!]! @fdc_generated(from: "MovieActor", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Actor", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Actor` table.
  """
  _count: Int! @fdc_generated(from: "Actor", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Actor` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Actor.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Actor` table where the `imageUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  imageUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Actor.imageUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Actor` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Actor.name", purpose: QUERY_COUNT)
}
extend type FavoriteMovie {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "FavoriteMovie", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `FavoriteMovie` table.
  """
  _count: Int! @fdc_generated(from: "FavoriteMovie", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `FavoriteMovie` table where the `movieId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  movieId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "FavoriteMovie.movieId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `FavoriteMovie` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "FavoriteMovie.userId", purpose: QUERY_COUNT)
}
extend type Genre {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Genre", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Genre` table.
  """
  _count: Int! @fdc_generated(from: "Genre", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Genre` table where the `genre` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  genre_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Genre.genre", purpose: QUERY_COUNT)
}
extend type Movie {
  """
  ✨ List `FavoriteMovie` objects in a one-to-many relationship (where `FavoriteMovie`.`movie` is this object).
  """
  favorite_movies_on_movie(
    """
    Filter condition to narrow down the query results.
    """
    where: FavoriteMovie_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [FavoriteMovie_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: FavoriteMovie_Having
  ): [FavoriteMovie!]! @fdc_generated(from: "FavoriteMovie.movie", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `MovieActor` objects in a one-to-many relationship (where `MovieActor`.`movie` is this object).
  """
  movieActors_on_movie(
    """
    Filter condition to narrow down the query results.
    """
    where: MovieActor_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [MovieActor_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: MovieActor_Having
  ): [MovieActor!]! @fdc_generated(from: "MovieActor.movie", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `MovieMetadata` objects in a one-to-many relationship (where `MovieMetadata`.`movie` is this object).
  """
  movieMetadatas_on_movie(
    """
    Filter condition to narrow down the query results.
    """
    where: MovieMetadata_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [MovieMetadata_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: MovieMetadata_Having
  ): [MovieMetadata!]! @fdc_generated(from: "MovieMetadata.movie", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Review` objects in a one-to-many relationship (where `Review`.`movie` is this object).
  """
  reviews_on_movie(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Review_Having
  ): [Review!]! @fdc_generated(from: "Review.movie", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Actor` objects using `MovieActor` as the join table (a `MovieActor` object exists where its `movie` is this and its `actor` is that).
  """
  actors_via_MovieActor(
    """
    Filter condition to narrow down the query results.
    """
    where: MovieActor_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [MovieActor_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: MovieActor_Having
  ): [Actor!]! @fdc_generated(from: "MovieActor", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `FavoriteMovie` as the join table (a `FavoriteMovie` object exists where its `movie` is this and its `user` is that).
  """
  users_via_FavoriteMovie(
    """
    Filter condition to narrow down the query results.
    """
    where: FavoriteMovie_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [FavoriteMovie_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: FavoriteMovie_Having
  ): [User!]! @fdc_generated(from: "FavoriteMovie", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `Review` as the join table (a `Review` object exists where its `movie` is this and its `user` is that).
  """
  users_via_Review(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Review_Having
  ): [User!]! @fdc_generated(from: "Review", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Movie", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Movie` table.
  """
  _count: Int! @fdc_generated(from: "Movie", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `genre` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  genre_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.genre", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `imageUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  imageUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.imageUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `rating` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  rating_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.rating", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `releaseYear` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  releaseYear_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.releaseYear", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `title` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  title_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.title", purpose: QUERY_COUNT)
  """
  ✨ Sum the `rating` field in the `Movie` table.
  """
  rating_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Movie.rating", purpose: QUERY_SUM)
  """
  ✨ Sum the `releaseYear` field in the `Movie` table.
  """
  releaseYear_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Movie.releaseYear", purpose: QUERY_SUM)
  """
  ✨ Average the `rating` field in the `Movie` table.
  """
  rating_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Movie.rating", purpose: QUERY_AVG)
  """
  ✨ Average the `releaseYear` field in the `Movie` table.
  """
  releaseYear_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Movie.releaseYear", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `rating` field in the `Movie` table.
  """
  rating_min: Float @fdc_generated(from: "Movie.rating", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `releaseYear` field in the `Movie` table.
  """
  releaseYear_min: Int @fdc_generated(from: "Movie.releaseYear", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `rating` field in the `Movie` table.
  """
  rating_max: Float @fdc_generated(from: "Movie.rating", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `releaseYear` field in the `Movie` table.
  """
  releaseYear_max: Int @fdc_generated(from: "Movie.releaseYear", purpose: QUERY_MAX)
}
extend type MovieActor {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "MovieActor", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `MovieActor` table.
  """
  _count: Int! @fdc_generated(from: "MovieActor", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MovieActor` table where the `actorId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  actorId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MovieActor.actorId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MovieActor` table where the `movieId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  movieId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MovieActor.movieId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MovieActor` table where the `role` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  role_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MovieActor.role", purpose: QUERY_COUNT)
}
extend type MovieMetadata {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "MovieMetadata", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `MovieMetadata` table.
  """
  _count: Int! @fdc_generated(from: "MovieMetadata", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MovieMetadata` table where the `director` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  director_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MovieMetadata.director", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MovieMetadata` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MovieMetadata.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MovieMetadata` table where the `movieId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  movieId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MovieMetadata.movieId", purpose: QUERY_COUNT)
}
extend type Review {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Review", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Review` table.
  """
  _count: Int! @fdc_generated(from: "Review", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `movieId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  movieId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.movieId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `rating` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  rating_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.rating", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `reviewDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  reviewDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.reviewDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `reviewText` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  reviewText_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.reviewText", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `rating` field in the `Review` table.
  """
  rating_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Review.rating", purpose: QUERY_SUM)
  """
  ✨ Average the `rating` field in the `Review` table.
  """
  rating_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Review.rating", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `rating` field in the `Review` table.
  """
  rating_min: Int @fdc_generated(from: "Review.rating", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `reviewDate` field in the `Review` table.
  """
  reviewDate_min: Date @fdc_generated(from: "Review.reviewDate", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `rating` field in the `Review` table.
  """
  rating_max: Int @fdc_generated(from: "Review.rating", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `reviewDate` field in the `Review` table.
  """
  reviewDate_max: Date @fdc_generated(from: "Review.reviewDate", purpose: QUERY_MAX)
}
extend type User {
  """
  ✨ List `FavoriteMovie` objects in a one-to-many relationship (where `FavoriteMovie`.`user` is this object).
  """
  favorite_movies_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: FavoriteMovie_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [FavoriteMovie_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: FavoriteMovie_Having
  ): [FavoriteMovie!]! @fdc_generated(from: "FavoriteMovie.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Review` objects in a one-to-many relationship (where `Review`.`user` is this object).
  """
  reviews_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Review_Having
  ): [Review!]! @fdc_generated(from: "Review.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Movie` objects using `FavoriteMovie` as the join table (a `FavoriteMovie` object exists where its `user` is this and its `movie` is that).
  """
  movies_via_FavoriteMovie(
    """
    Filter condition to narrow down the query results.
    """
    where: FavoriteMovie_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [FavoriteMovie_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: FavoriteMovie_Having
  ): [Movie!]! @fdc_generated(from: "FavoriteMovie", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Movie` objects using `Review` as the join table (a `Review` object exists where its `user` is this and its `movie` is that).
  """
  movies_via_Review(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Review_Having
  ): [Movie!]! @fdc_generated(from: "Review", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "User", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `User` table.
  """
  _count: Int! @fdc_generated(from: "User", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `username` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  username_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.username", purpose: QUERY_COUNT)
}
